import configManager from './configManager'
import { mongoConnect } from './dbModels'
require('source-map-support').install()
// const parseAPIRequests = require('./parseAPIRequests');
const session = require('electron').session
const { BrowserWindow, dialog, ipcMain, app } = require('electron')
const path = require('path')
const db = require('./dbController')
const parseAPIRequests = require('./parseAPI-FE-Req')
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

let mainWindow: any

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: 'Middle-Aware',
    width: 1024,
    height: 768,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
    show: false // Added to prevent focus change on reload during development
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  mainWindow.webContents.openDevTools()
  mainWindow.showInactive() // Added to prevent focus change on reload during development
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // session.defaultSession.setProxy({
  //   proxyRules: 'http://127.0.0.1:9000'
  //   // proxyBypassRules: 'localhost'
  // })

  console.log('MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY:', MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY)

  createWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  // Commenting out the following line to address issue where IPC channels are not loaded before window
  // if (BrowserWindow.getAllWindows().length === 0) {
  //   createWindow()
  // }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

async function handleFileOpen (event, fileOrDir) {
  console.log('fileOrDir: ', fileOrDir)
  const { canceled, filePaths } = await dialog.showOpenDialog(mainWindow, { properties: [(fileOrDir === 'directory' ? 'openDirectory' : 'openFile')] })
  if (canceled) {
    //
  } else {
    return filePaths[0]
  }
}

function handleFileParse (event, dir) { return parseAPIRequests(dir) }

async function handleGetRoute (event, route) { return await db.default.getRoute(route) }

async function handleGetTest (event, test) { return await db.default.getTest(test) }

function handleCopyConfig (event, dir) {
  configManager.copyConfig(dir)
  mongoConnect()
}

app.whenReady().then(() => {
  ipcMain.handle('dialog:openFile', handleFileOpen)
  ipcMain.handle('parseFiles', handleFileParse)
  ipcMain.handle('db:getAllRoutes', db.default.getAllRoutes)
  ipcMain.handle('db:getRoute', handleGetRoute)
  ipcMain.handle('db:getTest', handleGetTest)
  ipcMain.handle('copyConfig', handleCopyConfig)
})
